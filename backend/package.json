{
  "name": "backend",
  "version": "1.0.0",
  "main": "index.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1",
    "start": "serverless offline",
    "start:traditional": "node src/app.js",
    "dev": "serverless offline",
    "dev:traditional": "nodemon src/app.js",
    "serverless": "serverless offline",
    "deploy": "serverless deploy",
    "deploy:dev": "serverless deploy --stage dev --verbose",
    "deploy:staging": "serverless deploy --stage staging",
    "deploy:prod": "serverless deploy --stage prod",
    "deploy:rollback": "serverless deploy --stage $STAGE --revert",
    "deploy:rollback:dev": "serverless deploy --stage dev --revert",
    "deploy:rollback:staging": "serverless deploy --stage staging --revert",
    "deploy:rollback:prod": "serverless deploy --stage prod --revert",
    "remove": "serverless remove",
    "remove:dev": "serverless remove --stage dev",
    "remove:staging": "serverless remove --stage staging",
    "remove:prod": "serverless remove --stage prod",
    "logs": "serverless logs -f api",
    "logs:dev": "serverless logs -f api --stage dev",
    "logs:staging": "serverless logs -f api --stage staging",
    "logs:prod": "serverless logs -f api --stage prod",
    "migrate": "knex migrate:latest",
    "migrate:rollback": "knex migrate:rollback",
    "migrate:status": "knex migrate:status",
    "migrate:make": "knex migrate:make",
    "seed": "knex seed:run",
    "seed:make": "knex seed:make",
    "db:reset": "knex migrate:rollback --all && knex migrate:latest && knex seed:run",
    "db:optimize": "npm run migrate && echo 'Database optimized with performance indexes'",
    "db:backup": "node scripts/backup-database.js",
    "db:restore": "node scripts/restore-database.js",
    "circuit-breaker:status": "node scripts/circuit-breaker-monitor.js status",
    "circuit-breaker:reset": "node scripts/circuit-breaker-monitor.js reset",
    "circuit-breaker:help": "node scripts/circuit-breaker-monitor.js help",
    "performance:check": "npm run circuit-breaker:status",
    "troubleshoot": "npm run circuit-breaker:status && echo '\n--- Database Connection Test ---' && npm run migrate:status",
    "observability:start": "docker-compose -f docker-compose.observability.yml up -d",
    "observability:stop": "docker-compose -f docker-compose.observability.yml down",
    "observability:logs": "docker-compose -f docker-compose.observability.yml logs -f",
    "observability:restart": "npm run observability:stop && npm run observability:start",
    "dev:full": "npm run observability:start && npm run dev",
    "metrics": "curl http://localhost:9090/metrics",
    "health": "curl http://localhost:3003/health",
    "health:traditional": "curl http://localhost:3002/health",
    "health:check": "node scripts/health-check.js",
    "health:dev": "node scripts/health-check.js dev",
    "health:staging": "node scripts/health-check.js staging",
    "health:prod": "node scripts/health-check.js prod",
    "test:staging": "node scripts/test-staging.js",
    "test:prod": "node scripts/test-production.js",
    "test:integration": "node scripts/integration-tests.js",
    "logs:app": "tail -f logs/app-$(date +%Y-%m-%d).log",
    "test:guard-rails": "node test-guard-rails.js",
    "test:plug-and-play": "node test-plug-and-play.js",
    "validate:env": "node validate-env.js",
    "validate:spof": "node validate-env.js && echo 'Run: npm run test:guard-rails to test circuit breakers'",
    "security:audit": "npm audit --audit-level=high",
    "security:fix": "npm audit fix",
    "lint": "echo 'Linting not configured yet'",
    "lint:fix": "echo 'Linting not configured yet'"
  },
  "keywords": [],
  "author": "",
  "license": "ISC",
  "description": "",
  "dependencies": {
    "@aws-sdk/client-s3": "^3.654.0",
    "@aws-sdk/s3-request-presigner": "^3.654.0",
    "@opentelemetry/api": "^1.9.0",
    "@opentelemetry/auto-instrumentations-node": "^0.59.0",
    "@opentelemetry/exporter-jaeger": "^2.0.1",
    "@opentelemetry/exporter-prometheus": "^0.201.1",
    "@opentelemetry/instrumentation": "^0.201.1",
    "@opentelemetry/instrumentation-express": "^0.50.0",
    "@opentelemetry/instrumentation-fs": "^0.21.0",
    "@opentelemetry/instrumentation-http": "^0.201.1",
    "@opentelemetry/instrumentation-pg": "^0.53.0",
    "@opentelemetry/node": "^0.24.0",
    "@opentelemetry/resources": "^2.0.1",
    "@opentelemetry/sdk-node": "^0.201.1",
    "@opentelemetry/semantic-conventions": "^1.34.0",
    "aws-lambda": "^1.0.7",
    "bcryptjs": "^3.0.2",
    "cors": "^2.8.5",
    "dotenv": "^16.5.0",
    "express": "^4.19.2",
    "express-rate-limit": "^7.4.1",
    "express-slow-down": "^2.0.3",
    "helmet": "^8.0.0",
    "jsonwebtoken": "^9.0.2",
    "knex": "^3.1.0",
    "multer": "^1.4.5-lts.1",
    "opossum": "^8.1.4",
    "p-retry": "4.6.2",
    "pg": "^8.16.0",
    "pg-hstore": "^2.3.4",
    "redis": "^4.7.0",
    "sequelize": "^6.37.7",
    "serverless-http": "^3.2.0",
    "sharp": "^0.33.5",
    "uuid": "^11.1.0"
  },
  "devDependencies": {
    "sequelize-cli": "^6.6.3",
    "serverless": "^3.40.0",
    "serverless-offline": "^13.8.1",
    "serverless-plugin-warmup": "^8.3.0"
  }
}
